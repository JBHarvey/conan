// dependencies/gnu/binutils/Jenkinsfile

pipeline {
  agent { label 'conan_worker' }
  parameters {
    choice(name: 'Version', choices: ['', '2.31'], description: 'Target version to build')
    string(name: 'Profiles', defaultValue: 'clang-6.0-linux-i386-toolchain, clang-6.0-linux-x86_64-toolchain', description: 'Profiles to build with, multiple can be listed')
    string(name: 'Target_os', defaultValue: 'Linux', description: 'Target operating system, multiple can be listed')
    string(name: 'Target_architectures', defaultValue: 'x86_64, x86', description: 'Target architecture, multiple can be listed')
    string(name: 'Build_types', defaultValue: 'Debug, Release', description: 'Type of build, multiple can be listed')
  }
  stages {
    stage('Build') {
      steps {
        script {
          // Only run if a version was selected
          if ("${params.Version}" == "") {
            echo "No version was selected, exiting"
          } else {
            currentBuild.description = "v:${params.Version}, prof:${params.Profiles}, os:${params.Target_os}, arch:${params.Target_architectures}, b_types:${params.Build_types}"

            p = load 'functions.groovy'
            def conanfile_path = p.conanfile_path("${env.SCRIPT_PATH}", "${params.Version}")
            def build_cmds = p.create_binutils_build_commands("${params.Version}", "${params.Profiles}", "${params.Target_os}", "${params.Target_architectures}", "${params.Build_types}", "${conanfile_path}", "${env.CONAN_USER}", "${env.CONAN_CHANNEL}")

            stash name: 'all'

            def builds = [:]

            build_cmds.each {
              builds["${it.key}"] = {
                node('conan_worker') {
                  stage("${it.key}") {
                    unstash 'all'
                    sh "${it.value}"
                  }
                }
              }
            }

            parallel builds

            //p.upload("http://internet.com")
          }
        }
      }
    }
  }
}
